package com.chainsys.webapp.first;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.chainsys.miniproject.commonutil.InValidInputDataException;
import com.chainsys.miniproject.commonutil.Validator;
import com.chainsys.miniproject.dao.DoctorDao;
import com.chainsys.miniproject.pojo.Doctor;

/**
 * Servlet implementation class Doctor
 */
public class Doctors extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public Doctors() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		Doctor doc = new Doctor();
		System.out.println("Enter the Doctor id:");
		String doc_id = request.getParameter("did ");
		try {
			Validator.checkStringForParseInt(doc_id);
		}catch(InValidInputDataException e) {
			e.printStackTrace();
			System.exit(-1);
			
		}
		int doctor_id=Integer.parseInt(doc_id);
		try {
			Validator.CheckNumberForGreaterThanZero(doctor_id);
		}catch(InValidInputDataException e) {
			e.printStackTrace();
			System.exit(-1);	
		}
		doc.setDoctor_id(doctor_id);
		System.out.println("Enter Doctor name:");
		String doc_name = request.getParameter("dname");
		try {
			Validator.checkStringOnly(doc_name);
		}catch(InValidInputDataException e) {
			e.printStackTrace();
			System.exit(-1);	
		}
		doc.setDoctor_name(doc_name);
		System.out.println("Enter Doctor Date of birth like \"dd/mm/yyyy\":");
		SimpleDateFormat dobFormate = new SimpleDateFormat("dd/MM/yyyy");
		String Dob = request.getParameter("ddate");
		try {
			doc.setdate(dobFormate.parse(Dob));
		} catch (ParseException e) {
			e.printStackTrace();
			System.exit(-1);
		}
		System.out.println("Enter the Speciality:");
		String speciality = request.getParameter("dspecial");
		try {
			Validator.checkStringOnly(speciality);
		}catch(InValidInputDataException e) {
			e.printStackTrace();
			System.exit(-1);	
		}
		doc.setDoctor_speciality(speciality);
		System.out.println("Enter city:");
		String city =request.getParameter("location");
		try {
			Validator.checkStringOnly(city);
		}catch(InValidInputDataException e) {
			e.printStackTrace();
			System.exit(-1);	
		}
		doc.setCity(city);
		System.out.println("Enter phone number:");
		String phone =request.getParameter("phno");
		try {
			Validator.checkPhone(phone);
		}catch(InValidInputDataException e) {
			e.printStackTrace();
			System.exit(-1);	
		}
		doc.setPhone_no(Long.parseLong(phone));
		System.out.println("Enter Standard fees:");
		String std_fees = request.getParameter("fees");
		try {
			Validator.checkStringForParseInt(std_fees);
		}catch(InValidInputDataException e) {
			e.printStackTrace();
			System.exit(-1);	
		}
		float salary=Float.parseFloat(std_fees);
		doc.setStandard_fees(salary);
		int result = DoctorDao.insertDoctor(doc);
		System.out.println(result + "row inserted");
		
	}

}
